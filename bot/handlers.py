#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Handlers cho c√°c l·ªánh v√† tin nh·∫Øn c·ªßa bot
"""

import logging
from pyrogram import Client
from pyrogram.types import Message
from config import Messages
from scrapers.scraper_factory import ScraperFactory
from utils.validators import is_valid_url, is_supported_site

class BotHandlers:
    """L·ªõp x·ª≠ l√Ω c√°c handlers c·ªßa bot"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.scraper_factory = ScraperFactory()
    
    async def start_command(self, client: Client, message: Message):
        """X·ª≠ l√Ω l·ªánh /start"""
        try:
            await message.reply_text(
                Messages.START_MESSAGE,
                parse_mode="markdown",
                disable_web_page_preview=True
            )
            self.logger.info(f"Ng∆∞·ªùi d√πng {message.from_user.id} ƒë√£ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot")
        except Exception as e:
            self.logger.error(f"L·ªói khi x·ª≠ l√Ω l·ªánh start: {e}")
    
    async def help_command(self, client: Client, message: Message):
        """X·ª≠ l√Ω l·ªánh /help"""
        try:
            await message.reply_text(
                Messages.HELP_MESSAGE,
                parse_mode="markdown",
                disable_web_page_preview=True
            )
            self.logger.info(f"Ng∆∞·ªùi d√πng {message.from_user.id} ƒë√£ xem h∆∞·ªõng d·∫´n")
        except Exception as e:
            self.logger.error(f"L·ªói khi x·ª≠ l√Ω l·ªánh help: {e}")
    
    async def supported_command(self, client: Client, message: Message):
        """X·ª≠ l√Ω l·ªánh /supported"""
        try:
            await message.reply_text(
                Messages.SUPPORTED_SITES_MESSAGE,
                parse_mode="markdown",
                disable_web_page_preview=True
            )
            self.logger.info(f"Ng∆∞·ªùi d√πng {message.from_user.id} ƒë√£ xem danh s√°ch trang web ƒë∆∞·ª£c h·ªó tr·ª£")
        except Exception as e:
            self.logger.error(f"L·ªói khi x·ª≠ l√Ω l·ªánh supported: {e}")
    
    async def url_handler(self, client: Client, message: Message):
        """X·ª≠ l√Ω URL ƒë∆∞·ª£c g·ª≠i b·ªüi ng∆∞·ªùi d√πng"""
        try:
            url = message.text.strip()
            user_id = message.from_user.id
            
            self.logger.info(f"Ng∆∞·ªùi d√πng {user_id} g·ª≠i URL: {url}")
            
            # Ki·ªÉm tra URL h·ª£p l·ªá
            if not is_valid_url(url):
                await message.reply_text(Messages.INVALID_URL_MESSAGE)
                return
            
            # Ki·ªÉm tra trang web ƒë∆∞·ª£c h·ªó tr·ª£
            if not is_supported_site(url):
                await message.reply_text(Messages.UNSUPPORTED_SITE_MESSAGE)
                return
            
            # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
            processing_msg = await message.reply_text(Messages.PROCESSING_MESSAGE)
            
            # L·∫•y scraper ph√π h·ª£p
            scraper = self.scraper_factory.get_scraper(url)
            if not scraper:
                await processing_msg.edit_text(Messages.UNSUPPORTED_SITE_MESSAGE)
                return
            
            # Tr√≠ch xu·∫•t link stream
            stream_links = await scraper.extract_stream_links(url)
            
            if not stream_links:
                await processing_msg.edit_text(Messages.NO_STREAM_FOUND_MESSAGE)
                return
            
            # T·∫°o th√¥ng ƒëi·ªáp k·∫øt qu·∫£
            result_message = f"{Messages.SUCCESS_MESSAGE}\n\n"
            
            for i, link_info in enumerate(stream_links, 1):
                quality = link_info.get('quality', 'Unknown')
                link = link_info.get('url', '')
                source = link_info.get('source', 'Unknown')
                
                result_message += f"**{i}. {quality} - {source}**\n"
                result_message += f"`{link}`\n\n"
            
            result_message += "üí° **L∆∞u √Ω:** Nh·∫•n v√†o link ƒë·ªÉ copy, sau ƒë√≥ d√°n v√†o tr√¨nh ph√°t video."
            
            # G·ª≠i k·∫øt qu·∫£
            await processing_msg.edit_text(
                result_message,
                parse_mode="markdown",
                disable_web_page_preview=True
            )
            
            self.logger.info(f"ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng {len(stream_links)} link cho ng∆∞·ªùi d√πng {user_id}")
            
        except Exception as e:
            self.logger.error(f"L·ªói khi x·ª≠ l√Ω URL: {e}")
            error_message = Messages.ERROR_MESSAGE.format(error=str(e))
            
            try:
                await processing_msg.edit_text(error_message)
            except:
                await message.reply_text(error_message)
    
    async def default_handler(self, client: Client, message: Message):
        """X·ª≠ l√Ω tin nh·∫Øn m·∫∑c ƒë·ªãnh"""
        try:
            help_text = """
‚ùì **Kh√¥ng hi·ªÉu tin nh·∫Øn c·ªßa b·∫°n**

Vui l√≤ng:
‚Ä¢ G·ª≠i link phim t·ª´ c√°c trang web ƒë∆∞·ª£c h·ªó tr·ª£
‚Ä¢ S·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n
‚Ä¢ S·ª≠ d·ª•ng /supported ƒë·ªÉ xem danh s√°ch trang web

**V√≠ d·ª•:** G·ª≠i link nh∆∞ `https://tvhay.fm/phim/ten-phim`
"""
            
            await message.reply_text(
                help_text,
                parse_mode="markdown",
                disable_web_page_preview=True
            )
            
        except Exception as e:
            self.logger.error(f"L·ªói khi x·ª≠ l√Ω tin nh·∫Øn m·∫∑c ƒë·ªãnh: {e}")
