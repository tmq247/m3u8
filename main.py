import logging
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from practical_m3u8_finder import PracticalM3U8Finder
from config import TELEGRAM_BOT_TOKEN, LOG_LEVEL, LOG_FORMAT, MESSAGES, MAX_REQUESTS_PER_MINUTE

# C·∫•u h√¨nh logging
logging.basicConfig(
    format=LOG_FORMAT,
    level=LOG_LEVEL
)
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o Practical M3U8 Finder
m3u8_finder = EnhancedM3U8Finder()

# Rate limiting
user_requests = defaultdict(list)

def check_rate_limit(user_id: int) -> bool:
    """Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng request"""
    now = datetime.now()
    user_requests[user_id] = [
        req_time for req_time in user_requests[user_id]
        if now - req_time < timedelta(minutes=1)
    ]
    
    if len(user_requests[user_id]) >= MAX_REQUESTS_PER_MINUTE:
        return False
    
    user_requests[user_id].append(now)
    return True

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start"""
    await update.message.reply_text(MESSAGES['start'])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /help"""
    help_text = (
        "ü§ñ **Bot T√¨m Link M3U8**\n\n"
        "üìù **C√°ch s·ª≠ d·ª•ng:**\n"
        "‚Ä¢ G·ª≠i URL c·ªßa trang video ƒë·ªÉ t√¨m link M3U8\n"
        "‚Ä¢ H·ªó tr·ª£ nhi·ªÅu lo·∫°i trang web streaming\n\n"
        "‚ö†Ô∏è **L∆∞u √Ω:**\n"
        "‚Ä¢ M·ªôt s·ªë trang web ch·∫∑n truy c·∫≠p t·ª± ƒë·ªông\n"
        "‚Ä¢ Link M3U8 c√≥ th·ªÉ c·∫ßn JavaScript ƒë·ªÉ hi·ªÉn th·ªã\n"
        "‚Ä¢ Bot s·∫Ω h∆∞·ªõng d·∫´n n·∫øu kh√¥ng t√¨m th·∫•y link\n\n"
        "üîß **Gi·ªõi h·∫°n:**\n"
        "‚Ä¢ T·ªëi ƒëa 10 request/ph√∫t\n"
        "‚Ä¢ Ch·ªâ h·ªó tr·ª£ URL h·ª£p l·ªá\n\n"
        "üí° **M·∫πo:** N·∫øu kh√¥ng t√¨m th·∫•y link, h√£y th·ª≠ m·ªü trang web tr√™n tr√¨nh duy·ªát v√† ki·ªÉm tra Network tab."
    )
    await update.message.reply_text(help_text)

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω URL ƒë∆∞·ª£c g·ª≠i t·ª´ ng∆∞·ªùi d√πng"""
    user_id = update.effective_user.id
    url = update.message.text.strip()
    
    # Ki·ªÉm tra rate limit
    if not check_rate_limit(user_id):
        await update.message.reply_text(MESSAGES['rate_limit'])
        return
    
    # Ki·ªÉm tra URL h·ª£p l·ªá
    if not m3u8_finder.is_valid_url(url):
        await update.message.reply_text(MESSAGES['invalid_url'])
        return
    
    # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_message = await update.message.reply_text(MESSAGES['processing'])
    
    try:
        # T√¨m ki·∫øm link m3u8
        m3u8_links = m3u8_finder.find_m3u8_links(url)
        
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        await processing_message.delete()
        
        if not m3u8_links:
            # Provide helpful information when no links found
            helpful_message = (
                "‚ùå Kh√¥ng t√¨m th·∫•y link M3U8 tr·ª±c ti·∫øp.\n\n"
                "üí° L√Ω do c√≥ th·ªÉ:\n"
                "‚Ä¢ Trang web s·ª≠ d·ª•ng JavaScript ƒë·ªÉ t·∫£i video ƒë·ªông\n"
                "‚Ä¢ Link M3U8 ch·ªâ xu·∫•t hi·ªán khi nh·∫•n play\n"
                "‚Ä¢ Trang web c√≥ b·∫£o v·ªá ch·ªëng bot\n\n"
                "üîß H∆∞·ªõng d·∫´n:\n"
                "1. M·ªü trang web tr√™n tr√¨nh duy·ªát\n"
                "2. Nh·∫•n F12 ‚Üí Network ‚Üí Play video\n"
                "3. T√¨m file .m3u8 trong danh s√°ch request\n"
                "4. Copy link M3U8 ƒë·ªÉ s·ª≠ d·ª•ng"
            )
            await update.message.reply_text(helpful_message)
            return
        
        # Validate links and create response
        response = f"‚úÖ T√¨m th·∫•y {len(m3u8_links)} link M3U8:\n\n"
        
        valid_count = 0
        for i, link in enumerate(m3u8_links, 1):
            is_valid = m3u8_finder.validate_m3u8_link(link) if i <= 3 else None  # Only validate first 3
            status = ""
            if is_valid is True:
                status = " ‚úÖ"
                valid_count += 1
            elif is_valid is False:
                status = " ‚ö†Ô∏è"
            
            response += f"{i}. {link}{status}\n"
            
            # Telegram message length limit
            if len(response) > 4000:
                await update.message.reply_text(response)
                response = f"Ti·∫øp t·ª•c ({i+1}-{len(m3u8_links)}):\n\n"
        
        # Add validation summary
        if valid_count > 0:
            response += f"\n‚úÖ {valid_count} link ƒë√£ x√°c th·ª±c th√†nh c√¥ng"
        else:
            response += "\n‚ö†Ô∏è C√°c link c√≥ th·ªÉ c·∫ßn x√°c th·ª±c th√™m ho·∫∑c y√™u c·∫ßu tr√¨nh duy·ªát"
        
        if response.strip():
            await update.message.reply_text(response)
            
    except ValueError as e:
        await processing_message.delete()
        await update.message.reply_text(MESSAGES['invalid_url'])
        logger.error(f"Invalid URL from user {user_id}: {url}")
        
    except Exception as e:
        await processing_message.delete()
        error_msg = MESSAGES['error_fetching'].format(str(e))
        await update.message.reply_text(error_msg)
        logger.error(f"Error processing URL {url} from user {user_id}: {e}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω text message"""
    text = update.message.text.strip()
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i URL kh√¥ng
    if text.startswith(('http://', 'https://')):
        await handle_url(update, context)
    else:
        await update.message.reply_text(
            "ü§î T√¥i ch·ªâ c√≥ th·ªÉ x·ª≠ l√Ω URL. Vui l√≤ng g·ª≠i m·ªôt URL h·ª£p l·ªá b·∫Øt ƒë·∫ßu v·ªõi http:// ho·∫∑c https://\n\n"
            "V√≠ d·ª•: https://example.com/video"
        )

def main():
    """Kh·ªüi ch·∫°y bot"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN is not set in environment variables")
        return
    
    # T·∫°o application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # ƒêƒÉng k√Ω handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # Ch·∫°y bot
    logger.info("Starting M3U8 Finder Bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
